name: Build and Deploy to EC2 Without Key Pair

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "[default]" > ~/.aws/config
          echo "aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
          echo "region=${{ secrets.AWS_REGION }}" >> ~/.aws/config

      - name: Build Docker image
        run: docker build -t my-docker-app .

      - name: Tag Docker image
        run: docker tag my-docker-app:latest ${{ secrets.ECR_REPOSITORY }}:latest

      - name: Push Docker image to Amazon ECR
        run: docker push ${{ secrets.ECR_REPOSITORY }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Install AWS CLI
        run: sudo apt-get install -y awscli

      - name: Deploy Docker Image to EC2 Using SSM
        run: |
          # Execute commands on EC2 using SSM
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceids,Values=${{ secrets.EC2_INSTANCE_ID }}" \
            --parameters 'commands=["docker login -u AWS -p $(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) ${{ secrets.ECR_REPOSITORY }}", "docker pull ${{ secrets.ECR_REPOSITORY }}:latest", "docker stop my-docker-app || true", "docker rm my-docker-app || true", "docker run -d --name my-docker-app -p 80:80 ${{ secrets.ECR_REPOSITORY }}:latest"]' \
            --region ${{ secrets.AWS_REGION }} \
            --comment "Deploying Docker application"
